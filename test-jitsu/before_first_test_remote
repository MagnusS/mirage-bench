#!/bin/bash

TEST_PATH=$(dirname $0)
RESULT_PATH=$(pwd)

MIRAGE_VER=2.0.0
echo "This test requires $MIRAGE_VER"
opam list mirage | grep $MIRAGE_VER && echo "Mirage $MIRAGE_VER found" || exit -1

echo "This test requires tcpip to be pinned to https://github.com/samoht/mirage-tcpip#fast-start"
opam info tcpip | grep upstream | grep samoht || exit -1

eval `opam config env`

sudo apt-get install hping3 coreutils avahi-utils -y

# todo: this check is not very good... should check for libxl-support, not version
VIRSH_VERSION=$(sudo virsh --version)
if [ "$VIRSH_VERSION" != "1.2.8" ]; then
    echo "Requires libvirt compiled with --with-libxl. See install script in /root/scripts/"
    exit -1
fi

# make sure libvirt is running
sudo /etc/init.d/libvirt-bin start || exit -1
# kill old jitsus (if any)
sudo pkill jitsu

# install jitsu
cd $TEST_PATH || exit -1
opam install lwt dns libvirt -y || exit -1
if [ -d "jitsu" ]; then
    cd jitsu && git pull && cd - || exit -1
else
    git clone https://github.com/MagnusS/jitsu.git jitsu || exit -1
fi
cd jitsu && git checkout 0cc21d82eb741da0a885414d6822c2cf562af527 && cd - || exit -1

cd $TEST_PATH/jitsu && \
make && \
cd - || \
exit -1

# make sure old unikernel is not running
sudo brctl setageing br0 0

# setup unikernel

function make_unikernel () {
	name=$1
	ip=$2
	gw=$UNIKERNEL_GW
	netmask=$UNIKERNEL_NETMASK
	mac=$3
	file=$4
	dir=$5
	mode=$6
	memory=$7

	echo "Compiling unikernel $name with ip $ip gw $gw netmask $netmask mac $mac, read from $dir, compiled to in $file, mode=$mode"

	cd $dir && \
	cat config.tmpl | \
	sed "s/\$UNIKERNEL_IP/$ip/g" | \
	sed "s/\$UNIKERNEL_GW/$gw/g" | \
	sed "s/\$UNIKERNEL_NETMASK/$netmask/g" > config.ml && \
	cat config.ml && \
	cat dispatch.tmpl | \
	sed "s/\$MODE/$mode/g" > dispatch.ml && \
	cat dispatch.ml && \
	mirage clean && \
	mirage configure --xen && \
	mirage build && \
	cp mir-www.xen $file && \
	cd .. || \
	exit -1

	echo "<domain type='xen'>
	<name>$name</name>
	<!-- low memory = faster startup -->
	<memory unit='KiB'>$memory</memory>
	<currentMemory unit='KiB'>$memory</currentMemory>
	<vcpu placement='static'>1</vcpu>
	<os>
	<type arch='armv7l' machine='xenpv'>linux</type>
	<!-- replace with kernel -->
	<kernel>$file</kernel>
	<cmdline> </cmdline>
	</os>
	<clock offset='utc' adjustment='reset'/>
	<on_poweroff>destroy</on_poweroff>
	<on_reboot>restart</on_reboot>
	<on_crash>preserve</on_crash>
	<devices>
	<interface type='bridge'>
	  <mac address='$mac'/>
	  <source bridge='br0'/>
	  <script path='$TEST_PATH/jitsu/scripts/fast-vif-bridge'/>
	</interface>
	<console type='pty'>
	  <target type='virtio' port='0'/>
	</console>
	</devices>
	</domain>" > $TEST_PATH/jitsu/jitsu_libvirt.xml

	sudo virsh destroy $name 2>&1 > /dev/null
	sudo xl destroy $name 2>&1 >  /dev/null
	sudo virsh undefine $name 2>&1 > /dev/null # undefine old test-unikernel if it exists
	sudo virsh define $TEST_PATH/jitsu/jitsu_libvirt.xml || exit -1 # define new kernel
}


make_unikernel test-unikernel1 $UNIKERNEL_IP1 $UNIKERNEL_MAC1 $RESULT_PATH/unikernel1.xen $TEST_PATH/unikernel Normal 32000

make_unikernel test-unikernel-fast-start1 $UNIKERNEL_IP1 $UNIKERNEL_MAC1 $RESULT_PATH/unikernel-fast-start1.xen $TEST_PATH/unikernel Fast_start_app 32000

make_unikernel synjitsu $UNIKERNEL_IP5 $UNIKERNEL_MAC5 $RESULT_PATH/synjitsu.xen $TEST_PATH/synjitsu Normal 64000

# Remove ip from xenstore, just in case
sudo xenstore-rm /ip
